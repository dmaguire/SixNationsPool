#!/usr/bin/python

import random
import json
import sys

players = []
matches = []

def addPlayer (forename, surname, email, paid = False):
    player = {
                'id'      : len(players) + 1,
                'forename': forename,
                'surname' : surname,
                'email'   : email,
                'paid'    : paid,
                'guesses' : [],
                'points'  : 0
             }

    players.append (player)
    return

def updatePlayer ( id, forename = None, surname = None, email = None, paid = None ):
    playerIndex = int(id) - 1
    player = players[playerIndex]
    
    if forename:
        player['forename'] = forename

    if surname: 
        player['surname'] = surname

    if email:
        player['email'] = email

    if paid: 
        player['paid'] = paid

    return

def addGuess (playerid, matchid, guess):
    playerIndex = int(playerid) - 1
    matchIndex = int(matchid) - 1

    fullguess = ( 1 if int(guess[0]) < int(guess[1]) else (0 if int(guess[0]) == int(guess[1]) else -1), int(guess[0]), int(guess[1]) )

    if len( players[playerIndex]['guesses'] ) < (matchIndex + 1):
        for i in range( matchIndex + 1 ):
            players[playerIndex]['guesses'].append(())

    players[playerIndex]['guesses'][matchIndex] = fullguess
    return

def updatePoolResults(debug = False):
    for player in players:
        calculatePlayerResults( player, debug )

    return

def calculatePlayerResults( player, debug ):
    matchindex  = 0
    total       = 0
    player['points'] = 0

    if debug:
        print "Player Calc: {} {}".format(player['forename'], player['surname'])

    for guess in player['guesses']:
        total = 0
        if guess:
            result = matches[matchindex]['result']
            if result:
                ''' Calculation for points:
                    - If result is correct, 5 points.
                    - If home team score within 7, 2 points.
                    - If away team score within 7, 2 points.
                    - If score exactly right, 3 points.
                '''
                total += (5 if result[0] == guess[0] else 0)
                total += (2 if (-7 <= (result[1] - guess[1]) <= 7) else 0)
                total += (2 if (-7 <= (result[2] - guess[2]) <= 7) else 0)
                total += (3 if result[1] == guess[1] and result[2] == guess[2] else 0)

                player['points'] += total

                if debug:
                    print "Guess: {} - Result: {}".format(guess, result)
                    print "Total: {}".format(total)
                    print "Player Score: {}".format(player['points'])

        matchindex += 1

    return

def printPoolTable(debug = False):
    updatePoolResults(debug)

    results = sorted(players, key=lambda player: player['points'], reverse=True)

    print '+++++++++++++++++++++++++++++++++++'
    print '\tResults'
    print '+++++++++++++++++++++++++++++++++++'
    print 'Position\t| Name\t\t\t\t| Points |'
    i = 1
    for player in results:
        print '{:^5}\t\t| {:<4} {} {:<12} \t| {:^5}\t |'.format(i, player['id'], player['forename'], player['surname'], player['points'])
        i += 1

    print '++++++++++++++++++++++++++++++++++\n'


def printPlayers():
    print "=================================="
    print "\tPlayers"
    print "==================================\n"
    for player in players:
        printPlayerDetails(player)
    return

def printUnpaidPlayers():
    print "================================="
    print "\tUnpaid Players"
    print "=================================\n"
    total = 0
    for player in players:
        if player['paid'] == 'False':
            total += 1
            print 'Player: {} {} {}'.format( player['forename'], player['surname'], player['email'] )

    print "================================"
    print "Total Unpaid: {}".format(total)
    print "================================"

def printPlayerById(id):
    print "=================================="
    print "\tPlayer"
    print "==================================\n"
    playerindex = int(id) - 1
    printPlayerDetails(players[playerindex])

def printPlayerDetails(player):
    print "Player {}".format(player['id'])
    print "Name:\t\t {} {}".format(player['forename'], player['surname'])
    print "Email:\t\t {}".format(player['email'])
    print "Paid:\t\t {}".format(player['paid'])
    print "Currrent Score:\t {}".format(player['points'])

    if player['guesses']:
        print "---"
        print "Guesses:"
        i = 0
        for guess in player['guesses']:
            if guess:
                winstring = matches[i]['hometeam'] + ' Win!' if guess[0] == -1 else ('Draw!' if guess[0] == 0 else matches[i]['awayteam'] + ' Win!')

                print 'Match {}\t - {} v {}:\t {} - {} - {}'.format(
                                                                    matches[i]['id'], 
                                                                    matches[i]['hometeam'], 
                                                                    matches[i]['awayteam'], 
                                                                    guess[1], 
                                                                    guess[2], 
                                                                    winstring)
                
                if matches[i]['result']:
                    winstring = matches[i]['hometeam'] + ' Win!' if matches[i]['result'][0] == -1 else ('Draw!' if matches[i]['result'][0] == 0 else matches[i]['awayteam'] + ' Win!')
                    homediff = ((guess[1] - matches[i]['result'][1]) if guess[1] > matches[i]['result'][1] else (matches[i]['result'][1] - guess[1]))
                    awaydiff = ((guess[2] - matches[i]['result'][2]) if guess[2] > matches[i]['result'][2] else (matches[i]['result'][2] - guess[2]))
                    print '\tActual Result (Difference): {}({}) - {}({}) - {}'.format( matches[i]['result'][1], 
                                                                                       homediff,
                                                                                       matches[i]['result'][2],
                                                                                       awaydiff, 
                                                                                       winstring)
            i += 1
    print "\n=================================\n"


def printShortFormPlayers():
    print "=================================="
    print "\tPlayers"
    print "==================================\n"
    for player in players:
        print '{} - {} {} {} - {}'.format(player['id'], player['forename'], player['surname'], player['email'], ('Paid' if player['paid'] == 'True' else 'Unpaid'))

    print "===================================\n"

def addMatch (hometeam, awayteam, venue, date, time, week):
    match = { 'id'       : len(matches) + 1,
              'hometeam' : hometeam,
              'awayteam' : awayteam,
              'venue'    : venue,
              'date'     : date,
              'time'     : time,
              'week'     : week,
              'result'   : ()
            }
    matches.append(match)
    return

def addMatchResult (id, result):
    index = int(id) - 1
    fullresult = (1 if int(result[0]) < int(result[1]) else (0 if int(result[0]) == int(result[1]) else -1), int(result[0]), int(result[1]))
    matches[index]['result'] = fullresult
    return

def calculateSNTable():
    return

def printSNTable():
    calculateSNTable()
    return

def printMatches():
    print "============================================="
    print "\tMatches:"
    print "=============================================\n"

    for match in matches:
        printMatchDetails(match, False)
    return

def printMatchesByWeek(week = 1):
    print "============================================="
    print "\tMatches - Week: {}".format(week)
    print "============================================="

    for match in matches:
        if match['week'] == week:
            printMatchDetails(match, True)

def printMatchById(id):
    printMatchDetails(matches[(int(id)-1)], True)
    return

def printMatchDetails(match, guesses = False):
    print "Match {}".format(match['id'])
    print "Home Team:\t {}".format(match['hometeam'])
    print "Away Team:\t {}".format(match['awayteam'])
    print "Venue:\t\t {}".format(match['venue'])
    print "At:\t\t {} {}".format(match['time'], match['date'])
    
    if match['result']:
        winstring =  match['hometeam'] + ' Win!' if match['result'][0] == -1 else ('Draw!' if match['result'][0] == 0 else match['awayteam'] + ' Win!')
        print "Result:\t\t {} - {} - {}".format(match['result'][1], match['result'][2], winstring)
   
    matchStats = {
            'numberGuesses' : 0,
            'homescoreTotal': 0,
            'awayscoreTotal': 0,
            'numberForHome' : 0,
            'numberForAway' : 0,
            'numberForDraw' : 0,
            'closest'       : () 
            }

    hasGuesses = False

    if guesses:
        print '-------------------------------------'
        for player in players:
            matchGuess = ()
            if len(player['guesses']) >= match['id']:
                matchGuess = player['guesses'][(match['id'] - 1)]
            if matchGuess:
                hasGuesses = True
                matchStats['numberGuesses'] += 1
                matchStats['homescoreTotal'] += matchGuess[1]
                matchStats['awayscoreTotal'] += matchGuess[2]
                matchStats['numberForHome'] += 1 if matchGuess[0] == -1 else 0
                matchStats['numberForAway'] += 1 if matchGuess[0] == 1 else 0
                matchStats['numberForDraw'] += 1 if matchGuess[0] == 0 else 0
                
                if match['result']:
                    homediff = ((matchGuess[1] - match['result'][1]) if matchGuess[1] > match['result'][1] else (match['result'][1] - matchGuess[1]))
                    awaydiff = ((matchGuess[2] - match['result'][2]) if matchGuess[2] > match['result'][2] else (match['result'][2] - matchGuess[2]))
                    totaldiff = homediff + awaydiff
                    if matchStats['closest']:
                        if (matchStats['closest'][0] > totaldiff):
                            matchStats['closest'] = (totaldiff, [player])
                        elif (matchStats['closest'][0] == totaldiff):
                            matchStats['closest'] = (matchStats['closest'][0], matchStats['closest'][1].append(player))

                    else:
                        matchStats['closest'] = (totaldiff, [player])

                print '{} {:<10} \t- {} v {}'.format( player['forename'], player['surname'], matchGuess[1], matchGuess[2] )
            
    if hasGuesses:    
        print '------------------------------------'
        print 'Stats: '
        print 'Average Home Guess: {}'.format( (matchStats['homescoreTotal'] / matchStats['numberGuesses']) )
        print 'Average Away Guess: {}'.format( (matchStats['awayscoreTotal'] / matchStats['numberGuesses']) )
        print 'Number for Home Win: {}'.format( matchStats['numberForHome'] )
        print 'Number for Away Win: {}'.format( matchStats['numberForAway'] )
        print 'Number for Draw: {}'.format( matchStats['numberForDraw'] )

        if (matchStats['closest']):
            if (len(matchStats['closest'][1]) > 1):
                print 'Closest Guesses: Difference: {} '.format(matchStats['closest'][0])
                for player in matchStats['closest'][1]:
                    print '\t{} {} - {} {}' .format( player['forename'], 
                                                     player['surname'], 
                                                     player['guesses'][(match['id'] - 1)][1], 
                                                     player['guesses'][(match['id'] - 1)][2])
            else:
                player = matchStats['closest'][1][0]
                print 'Closest Guess - Difference {}: {} {} - {} {}'.format( matchStats['closest'][0],
                                                                             player['forename'], 
                                                                             player['surname'], 
                                                                             player['guesses'][(match['id'] - 1)][1], 
                                                                             player['guesses'][(match['id'] - 1)][2])


    print "\n============================================\n"
    return

def printResults():
    print "=============================================="
    print "\tResults"
    print "==============================================\n"

    for match in matches:
        if match['result']:
            winstring =  match['hometeam'] + ' Win!' if match['result'][0] == -1 else ('Draw!' if match['result'][0] == 0 else match['awayteam'] + ' Win!')
            print "{} {} : {} {} v {} {} -\t {}".format(match['date'], match['time'], match['hometeam'], match['result'][1], match['awayteam'], match['result'][2], winstring)

    print "\n==============================================\n"

def saveData():
    try:
        matchoutput  = open('matches.data', 'wb')
        json.dump (matches, matchoutput)
        matchoutput.close()
    except IOError as e:
    #    print "I/O error({0}): {1}".format(e.errno, e.strerror)
        print 'matches.data file cannot be opened.'

    try:
        playeroutput = open('players.data', 'wb')
        json.dump (players, playeroutput)
        playeroutput.close()
    except IOError as e:
    #    print "I/O error({0}): {1}".format(e.errno, e.strerror)
        print 'players.data file cannot be opened.'

def loadData():
    try:
        playerdata = open('players.data', 'rb')
        player = json.load(playerdata)
        players.extend(player)
        playerdata.close()
    except IOError as e:
    #    print "I/O error({0}): {1}".format(e.errno, e.strerror)
        print 'No player data exists. Continuing...'

    try:
        matchdata = open('matches.data', 'rb')
        match = json.load(matchdata)
        matches.extend(match)
        matchdata.close()
    except IOError as e:
    #    print "I/O error({0}): {1}".format(e.errno, e.strerror)
        print 'No match data exists. Continuing...'

    return

if __name__ == '__main__':
    if len(sys.argv) <= 1:
        print 'Please specify one of either add, print, modify or calculate.'
        exit(1)

    loadData()

    if sys.argv[1] == 'add':
        if sys.argv[2] == 'player':
            addPlayer ( forename = sys.argv[3], surname = sys.argv[4], email = sys.argv[5], paid = sys.argv[6] )

        elif sys.argv[2] == 'match':
            addMatch ( hometeam = sys.argv[3], awayteam = sys.argv[4], venue = sys.argv[5], date = sys.argv[6], time = sys.argv[7], week = sys.argv[8] )

        elif sys.argv[2] == 'result':
            result = (sys.argv[4], sys.argv[5])
            addMatchResult (id = sys.argv[3], result = result)

        elif sys.argv[2] == 'guess':
            guess = (sys.argv[5], sys.argv[6])
            addGuess (playerid = sys.argv[3], matchid = sys.argv[4], guess = guess)

        elif sys.argv[2] == 'help':
            print 'Facilities for adding players and matches:'
            print 'add player <forename> <surname> <email> <paid>'
            print 'add match  <hometeam> <awayteam> <venue> <date> <time>'
            print 'add result <match-id> <homescore> <awayscore>'
            print 'add guess  <player-id> <match-id> <homescore> <awayscore>'

        else:
            print 'Unknown add function, please specify either add player or add match, or use add help to see usage text.'
            exit(1)

        updatePoolResults()
        saveData()

    elif sys.argv[1] == 'update':
        if sys.argv[2] == 'name':
            updatePlayer( id = sys.argv[3], forename = sys.argv[4] )

        elif sys.argv[2] == 'surname':
            updatePlayer( id = sys.argv[3], surname = sys.argv[4] )

        elif sys.argv[2] == 'email':
            updatePlayer( id = sys.argv[3], email = sys.argv[4] )

        elif sys.argv[2] == 'paid':
            updatePlayer( id = sys.argv[3], paid = sys.argv[4] )
        
        elif sys.argv[2] == 'guess':
            guess = (sys.argv[5], sys.argv[6])
            addGuess (playerid = sys.argv[3], matchid = sys.argv[4], guess = guess)

        elif sys.argv[2] == 'help':
            print 'update name <id> <name> \t\t- Updates players forename.'
            print 'update surname <id> <surname> \t- Updates players surname.'
            print 'update email <id> <email> \t\t- Updates players email.'
            print 'update paid <id> <paid> \t\t- Updates players paid status.'
            print 'update guess <id> <match-id> <homescore> <awayscore> - Updates players guess for specified match.'
            exit(1)
        
        else:
            print 'Unknown update function, please specify either name, surname, email, paid or guess.'

        updatePoolResults()
        saveData()

    elif sys.argv[1] == 'print' or sys.argv[1] == 'display':
        if sys.argv[2] == 'players':
            printPlayers()

        elif sys.argv[2] == 'player':
            printPlayerById(sys.argv[3])

        elif sys.argv[2] == 'matches':
            printMatches()

        elif sys.argv[2] == 'week':
            printMatchesByWeek(sys.argv[3])

        elif sys.argv[2] == 'match':
            printMatchById(sys.argv[3])

        elif sys.argv[2] == 'results':
            printResults()

        elif sys.argv[2] == 'sn-table':
            printSNTable()

        elif sys.argv[2] == 'pool':
            printPoolTable()

        elif sys.argv[2] == 'unpaid':
            printUnpaidPlayers()

        elif sys.argv[2] == 'short':
            printShortFormPlayers()
            
        elif sys.argv[2] == 'debug':
            printPoolTable(True) 

        elif sys.argv[2] == 'help':
            print 'Facilities for printing details:'
            print 'print players \t\t- Displays details of the players signed up for the Pool.'
            print 'print player <id> \t- Displays details of a specific player, by ID.'
            print 'print matches \t\t- Displays details of the Six Nations championship matches.'
            print 'print match <id> \t- Displays details of an individual match.'
            print 'print results \t\t- Displays short form details of the Six Nations results.'
            print 'print sn-table \t\t- Displays the current Six Nations results table.'
            print 'print pool \t\t- Displays the current Pool results table.'
            print 'print unpaid \t\t- Displays a list of players who have yet to pay.'
            print 'print short \t\t- Displays a short list of players.'
            print 'print debug \t\t- Displays the pool table, but with debug information displaying calculations.'
            exit(0)    

        else:
            print 'Please specify what to print, either players, matches, or current table.'
            exit(1)

    else:
        print 'Please specify one of either add, print, modify or calculate.'
        exit(1)
